
/* 
    { LICENSE }
*/

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

/* What time is it? */

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

#include <Carbon/Carbon.h>
#include <QuickTime/QuickTime.h>

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

#include "ext.h"
#include "ext_obex.h"

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

#include "ext_atomic.h"

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

#include "JuceHeader.h"

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

/* TODO: Implement a Waster class? */

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

typedef struct _waste {
    long bStep;
    long bIndex;
    } t_waste;

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

static t_int32_atomic counter;

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

#define FLOP_SIZE_WASTE 65521L

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

static long values[FLOP_SIZE_WASTE];

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

void waste_constructor  (void);

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

#if defined ( __clang__ ) || defined ( __GNUC__ )

void waste_ctor(void)  __attribute__ ((constructor));
void waste_ctor(void)  { waste_constructor(); }

#endif

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

void waste_constructor(void)
{
    long i;
    unsigned long long seed = time(NULL) & 0xffULL;
    
    for (i = 0; i < FLOP_SIZE_WASTE; i++) {
        values[i] = ((seed = ((seed * 0x5deece66dULL + 0xbULL) & 0xffffffffffffULL)) >> 16);
    }
}

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

void waste_init(t_waste *x)
{
    long k = ATOMIC_INCREMENT(&counter);
    
    x->bStep = (k % (FLOP_SIZE_WASTE - 1)) + 1;
    x->bIndex = 0;
}

void waste_time(t_waste *x)
{
    long i;
    
    do {
    //
    i = values[x->bIndex];
    x->bIndex += x->bStep;
    if (x->bIndex >= FLOP_SIZE_WASTE) {
        x->bIndex -= FLOP_SIZE_WASTE;
    }
    //
    } while (i & 7);
}

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

typedef struct _jojo {

public :
    _jojo() : mTime(Time::getCurrentTime()) { }

public:
    t_object    ob;
    ulong       mError;
    Time        mTime;
    
    } t_jojo;
    
// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

#ifdef WIN_VERSION
    #define JOJO_EXPORT __declspec(dllexport)
#else
    #define JOJO_EXPORT __attribute__((visibility("default")))
#endif

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

#define JOJO_GOOD   0UL
#define JOJO_ERROR  1UL

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

#include <memory>

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

void *jojo_new          (t_symbol *s, long argc, t_atom *argv);
void jojo_free          (t_jojo *x);
void jojo_bang          (t_jojo *x);
void jojo_benchmark     (t_jojo *x);
void jojo_doSomething   (void);

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

static t_class *jojo_class;

JOJO_EXPORT int main(void)
{   
    t_class *c = NULL;
    
    c = class_new("jojoTime", (method)jojo_new, (method)jojo_free, sizeof(t_jojo), NULL, A_GIMME, 0);
    
    class_addmethod(c, (method)jojo_bang,       "bang",         0);
    class_addmethod(c, (method)jojo_benchmark,  "benchmark",    0);
    
    class_register(CLASS_BOX, c);
    jojo_class = c;
    
    return 0;
}

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

void *jojo_new(t_symbol *s, long argc, t_atom *argv)
{
    t_jojo *x = NULL;
    
    if ((x = (t_jojo *)object_alloc(jojo_class))) {
    //
    ulong err = (x->mError = JOJO_GOOD);
    
    try {
        new(x)t_jojo;
    }
    
    catch (...) {
        err = (x->mError = JOJO_ERROR);
    }

    if (err) {
        object_free(x);
        x = NULL;
    }
    //
    }
    
    return x;
}

void jojo_free(t_jojo *x)
{
    if (!x->mError) { x->~t_jojo(); }
}

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

void jojo_bang(t_jojo *x)
{
    RelativeTime elapsedTime(Time::getCurrentTime() - x->mTime);
    
    post("Origin / %s", x->mTime.toString(true, true, true, true).toRawUTF8());
    post("Elapsed / %s", elapsedTime.getDescription().toRawUTF8());
}

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
#pragma mark -

void jojo_benchmark(t_jojo *x) 
{
    File folder(File::getSpecialLocation(File::currentApplicationFile).getParentDirectory());
    
    /* Return "jojoTime.txt" "jojoTime2.txt" "jojoTime3.txt"... */
    
    PerformanceCounter benchmark("Jojo", 100, folder.getNonexistentChildFile("jojoTime", ".txt", false));

    for (int i = 0; i < 1000; ++i) {
    //
    benchmark.start();
    jojo_doSomething();
    benchmark.stop();
    //
    }
}

void jojo_doSomething(void)
{
    t_waste waste;
    waste_init(&waste);
    
    for (int i = 0; i < 100; ++i) { waste_time(&waste); }       /* Waste only few CPU cycles. */
}

// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
